$date
	Tue Oct 17 14:58:49 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module topmodule_tb $end
$var reg 1 ! clk $end
$var reg 1 " en $end
$var reg 1 # rst $end
$scope module u_mp $end
$var wire 1 ! clk $end
$var wire 1 " en $end
$var wire 4 $ f_mask [3:0] $end
$var wire 14 % f_mem_addr [13:0] $end
$var wire 1 & f_wr_en $end
$var wire 1 ' instruct_en $end
$var wire 32 ( instruction [31:0] $end
$var wire 4 ) mask [3:0] $end
$var wire 14 * mem_addr [13:0] $end
$var wire 1 + mem_write $end
$var wire 1 , req $end
$var wire 1 # rst $end
$var wire 4 - store_op [3:0] $end
$var wire 1 . valid $end
$var wire 1 / wr_en $end
$var wire 32 0 w_data [31:0] $end
$var wire 32 1 r_data [31:0] $end
$var wire 1 2 f_req $end
$var wire 32 3 f_r_data [31:0] $end
$scope module u_core $end
$var wire 1 ! clk $end
$var wire 32 4 data_in [31:0] $end
$var wire 1 5 en $end
$var wire 4 6 f_mask [3:0] $end
$var wire 32 7 f_w_data [31:0] $end
$var wire 3 8 func3 [2:0] $end
$var wire 1 ' instruct_en $end
$var wire 32 9 instruction [31:0] $end
$var wire 4 : mask [3:0] $end
$var wire 14 ; mem_addr [13:0] $end
$var wire 32 < r_data [31:0] $end
$var wire 1 , req $end
$var wire 1 # rst $end
$var wire 32 = wrapper_mem_i [31:0] $end
$var wire 32 > wrapper_mem_o [31:0] $end
$var wire 1 / wr_en $end
$var wire 32 ? w_data [31:0] $end
$var wire 4 @ store_op [3:0] $end
$var wire 5 A rs2_addr [4:0] $end
$var wire 5 B rs1_addr [4:0] $end
$var wire 32 C result [31:0] $end
$var wire 1 D reg_write $end
$var wire 2 E rd_sel [1:0] $end
$var wire 5 F rd_addr [4:0] $end
$var wire 32 G pc [31:0] $end
$var wire 1 H op_b_sel $end
$var wire 32 I op_b [31:0] $end
$var wire 1 J op_a_sel $end
$var wire 32 K op_a [31:0] $end
$var wire 1 L mem_write $end
$var wire 1 M mem_read $end
$var wire 1 N jalr $end
$var wire 1 O jal $end
$var wire 32 P imm [31:0] $end
$var wire 1 Q f_wr_en $end
$var wire 1 R f_req $end
$var wire 14 S f_mem_addr [13:0] $end
$var wire 1 T branch_taken $end
$var wire 1 U branch $end
$var wire 5 V alu_op [4:0] $end
$scope module dec_s $end
$var wire 1 ! clk $end
$var wire 32 W data_in [31:0] $end
$var wire 32 X data_in_rf [31:0] $end
$var wire 1 5 en $end
$var wire 32 Y instruction [31:0] $end
$var wire 32 Z pc [31:0] $end
$var wire 1 , req $end
$var wire 1 # rst $end
$var wire 5 [ rs2_addr [4:0] $end
$var wire 5 \ rs1_addr [4:0] $end
$var wire 1 D reg_write $end
$var wire 2 ] rd_sel [1:0] $end
$var wire 5 ^ rd_addr [4:0] $end
$var wire 1 H op_b_sel $end
$var wire 32 _ op_b [31:0] $end
$var wire 1 J op_a_sel $end
$var wire 32 ` op_a [31:0] $end
$var wire 1 L mem_write $end
$var wire 1 M mem_read $end
$var wire 1 a load $end
$var wire 1 N jalr $end
$var wire 1 O jal $end
$var wire 32 b imm [31:0] $end
$var wire 1 T branch_taken $end
$var wire 1 U branch $end
$var wire 1 c alu_op_b $end
$var wire 1 d alu_op_a $end
$var wire 5 e alu_op [4:0] $end
$scope module U_rf0 $end
$var wire 1 ! clk $end
$var wire 32 f data_in [31:0] $end
$var wire 1 # rst $end
$var wire 5 g rs2_addr [4:0] $end
$var wire 5 h rs1_addr [4:0] $end
$var wire 5 i rd_addr [4:0] $end
$var wire 32 j op_b [31:0] $end
$var wire 32 k op_a [31:0] $end
$var wire 1 D en $end
$var integer 32 l i [31:0] $end
$upscope $end
$scope module u_cu $end
$var wire 32 m instruction [31:0] $end
$var wire 5 n rs2_addr [4:0] $end
$var wire 5 o rs1_addr [4:0] $end
$var wire 5 p rd_addr [4:0] $end
$var reg 5 q alu_op [4:0] $end
$var reg 1 T branch_taken $end
$var reg 32 r imm [31:0] $end
$var reg 1 O jal $end
$var reg 1 N jalr $end
$var reg 1 a load $end
$var reg 1 M mem_read $end
$var reg 1 L mem_write $end
$var reg 1 J op_a_sel $end
$var reg 1 H op_b_sel $end
$var reg 2 s rd_sel [1:0] $end
$var reg 1 D reg_write $end
$var reg 1 t req $end
$upscope $end
$scope module u_jc $end
$var wire 32 u instruction [31:0] $end
$var wire 32 v op_a [31:0] $end
$var wire 32 w op_b [31:0] $end
$var reg 1 U branch $end
$upscope $end
$upscope $end
$scope module exe_s $end
$var wire 5 x alu_op [4:0] $end
$var wire 32 y alu_op_a [31:0] $end
$var wire 32 z alu_op_b [31:0] $end
$var wire 32 { op_a [31:0] $end
$var wire 32 | op_b [31:0] $end
$var wire 32 } result [31:0] $end
$scope module u_alu $end
$var wire 5 ~ alu_op [4:0] $end
$var wire 32 !" op_a [31:0] $end
$var wire 32 "" op_b [31:0] $end
$var reg 32 #" result [31:0] $end
$upscope $end
$upscope $end
$scope module fetch_s $end
$var wire 1 U branch $end
$var wire 1 T branch_taken $end
$var wire 1 ! clk $end
$var wire 4 $" f_mask [3:0] $end
$var wire 32 %" f_w_data [31:0] $end
$var wire 32 &" imm [31:0] $end
$var wire 1 O jal $end
$var wire 1 N jalr $end
$var wire 1 '" load $end
$var wire 32 (" result [31:0] $end
$var wire 1 # rst $end
$var wire 32 )" pc [31:0] $end
$var wire 14 *" f_mem_addr [13:0] $end
$var reg 1 R f_req $end
$var reg 1 Q f_wr_en $end
$scope module u_pc $end
$var wire 1 U branch $end
$var wire 1 T branch_taken $end
$var wire 1 ! clk $end
$var wire 32 +" imm [31:0] $end
$var wire 1 O jal $end
$var wire 1 N jalr $end
$var wire 32 ," result [31:0] $end
$var wire 1 # rst $end
$var reg 32 -" pc [31:0] $end
$upscope $end
$upscope $end
$scope module mem_s $end
$var wire 1 ! clk $end
$var wire 3 ." func3 [2:0] $end
$var wire 32 /" instruction [31:0] $end
$var wire 14 0" mem_addr [13:0] $end
$var wire 32 1" op_b [31:0] $end
$var wire 32 2" r_data [31:0] $end
$var wire 1 , req $end
$var wire 32 3" result [31:0] $end
$var wire 32 4" wrapper_mem_i [31:0] $end
$var wire 32 5" wrapper_mem_o [31:0] $end
$var wire 1 / wr_en $end
$var wire 32 6" w_data [31:0] $end
$var wire 4 7" store_op [3:0] $end
$scope module u_wrapper $end
$var wire 1 ! clk $end
$var wire 3 8" func3 [2:0] $end
$var wire 14 9" mem_addr [13:0] $end
$var wire 32 :" r_data [31:0] $end
$var wire 32 ;" wrapper_mem_i [31:0] $end
$var reg 1 <" req $end
$var reg 4 =" store_op [3:0] $end
$var reg 32 >" w_data [31:0] $end
$var reg 1 / wr_en $end
$var reg 32 ?" wrapper_mem_o [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module u_datamem $end
$var wire 1 @" clk $end
$var wire 4 A" mask [3:0] $end
$var wire 14 B" mem_addr [13:0] $end
$var wire 32 C" w_data [31:0] $end
$var wire 1 + wr_en $end
$var reg 32 D" r_data [31:0] $end
$var reg 1 E" req $end
$var reg 1 F" valid $end
$upscope $end
$scope module u_intructmem $end
$var wire 1 G" clk $end
$var wire 4 H" mask [3:0] $end
$var wire 14 I" mem_addr [13:0] $end
$var wire 32 J" w_data [31:0] $end
$var wire 1 & wr_en $end
$var reg 32 K" r_data [31:0] $end
$var reg 1 2 req $end
$var reg 1 L" valid $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xL"
bx K"
bz J"
bz I"
bz H"
zG"
xF"
xE"
bx D"
bx C"
bz B"
bz A"
z@"
bx ?"
bx >"
b0 ="
1<"
bz ;"
bz :"
bx 9"
bz 8"
b0 7"
bx 6"
bx 5"
bz 4"
bx 3"
bz 2"
bz 1"
bz 0"
bz /"
bz ."
bx -"
bx ,"
bx +"
b0xxxxxxx *"
bx )"
bx ("
z'"
bx &"
bz %"
b1111 $"
bx #"
bz ""
bz !"
bx ~
bx }
bx |
bx {
bz z
bz y
bx x
bx w
bx v
bz u
1t
bx s
bx r
bx q
bz p
bz o
bz n
bz m
bx l
bx k
bx j
bz i
bz h
bz g
bz f
bx e
xd
xc
bx b
xa
bx `
bx _
bz ^
bx ]
bz \
bz [
bz Z
bz Y
bz X
bz W
bx V
0U
0T
b0xxxxxxx S
xR
xQ
bx P
0O
xN
xM
xL
bx K
xJ
bx I
xH
bx G
bz F
bx E
xD
bx C
bz B
bz A
b0 @
bx ?
bx >
bz =
bz <
bz ;
bz :
bz 9
bz 8
bz 7
b1111 6
z5
bz 4
bx 3
x2
bx 1
bx 0
x/
x.
bz -
x,
z+
bz *
bz )
bz (
z'
z&
bz %
bz $
0#
0"
0!
$end
#5
b1111111 S
b1111111 *"
b11111111111111111111111111111100 G
b11111111111111111111111111111100 )"
b11111111111111111111111111111100 -"
0Q
b100000 l
1!
#10
0!
#15
b100000 l
1!
#20
0!
#25
b0 S
b0 *"
b0 G
b0 )"
b0 -"
1Q
1!
1"
1#
#30
0!
#35
b1 S
b1 *"
b100 G
b100 )"
b100 -"
1!
#40
0!
#45
b10 S
b10 *"
b1000 G
b1000 )"
b1000 -"
1!
#50
0!
#55
b11 S
b11 *"
b1100 G
b1100 )"
b1100 -"
1!
#60
0!
#65
b100 S
b100 *"
b10000 G
b10000 )"
b10000 -"
1!
#70
0!
#75
b101 S
b101 *"
b10100 G
b10100 )"
b10100 -"
1!
#80
0!
#85
b110 S
b110 *"
b11000 G
b11000 )"
b11000 -"
1!
#90
0!
#95
b111 S
b111 *"
b11100 G
b11100 )"
b11100 -"
1!
#100
0!
#105
b1000 S
b1000 *"
b100000 G
b100000 )"
b100000 -"
1!
#110
0!
#115
b1001 S
b1001 *"
b100100 G
b100100 )"
b100100 -"
1!
#120
0!
#125
b1010 S
b1010 *"
b101000 G
b101000 )"
b101000 -"
1!
#130
0!
#135
b1011 S
b1011 *"
b101100 G
b101100 )"
b101100 -"
1!
#140
0!
#145
b1100 S
b1100 *"
b110000 G
b110000 )"
b110000 -"
1!
#150
0!
#155
b1101 S
b1101 *"
b110100 G
b110100 )"
b110100 -"
1!
#160
0!
#165
b1110 S
b1110 *"
b111000 G
b111000 )"
b111000 -"
1!
#170
0!
#175
b1111 S
b1111 *"
b111100 G
b111100 )"
b111100 -"
1!
#180
0!
#185
b10000 S
b10000 *"
b1000000 G
b1000000 )"
b1000000 -"
1!
#190
0!
#195
b10001 S
b10001 *"
b1000100 G
b1000100 )"
b1000100 -"
1!
#200
0!
#205
b10010 S
b10010 *"
b1001000 G
b1001000 )"
b1001000 -"
1!
#210
0!
#215
b10011 S
b10011 *"
b1001100 G
b1001100 )"
b1001100 -"
1!
#220
0!
#225
b10100 S
b10100 *"
b1010000 G
b1010000 )"
b1010000 -"
1!
#230
0!
#235
b10101 S
b10101 *"
b1010100 G
b1010100 )"
b1010100 -"
1!
#240
0!
#245
b10110 S
b10110 *"
b1011000 G
b1011000 )"
b1011000 -"
1!
#250
0!
#255
b10111 S
b10111 *"
b1011100 G
b1011100 )"
b1011100 -"
1!
#260
0!
#265
b11000 S
b11000 *"
b1100000 G
b1100000 )"
b1100000 -"
1!
#270
0!
#275
b11001 S
b11001 *"
b1100100 G
b1100100 )"
b1100100 -"
1!
#280
0!
#285
b11010 S
b11010 *"
b1101000 G
b1101000 )"
b1101000 -"
1!
#290
0!
#295
b11011 S
b11011 *"
b1101100 G
b1101100 )"
b1101100 -"
1!
#300
0!
#305
b11100 S
b11100 *"
b1110000 G
b1110000 )"
b1110000 -"
1!
#310
0!
#315
b11101 S
b11101 *"
b1110100 G
b1110100 )"
b1110100 -"
1!
#320
0!
#325
b11110 S
b11110 *"
b1111000 G
b1111000 )"
b1111000 -"
1!
#330
0!
#335
b11111 S
b11111 *"
b1111100 G
b1111100 )"
b1111100 -"
1!
#340
0!
#345
b100000 S
b100000 *"
b10000000 G
b10000000 )"
b10000000 -"
1!
